/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/generate-sample": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["PostGenerateSample"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/project-items": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageSize?: number;
          continuationToken?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["JsonElementPaginatedResponse"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/problem+json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          pageSize?: number;
          continuationToken?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ProjectPaginatedResponse"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/problem+json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/search-projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["ProjectSearchRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ProjectPaginatedResponse"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/problem+json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/search": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["EntitySearchRequest"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["ProjectPaginatedResponse"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/problem+json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/export-all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: {
      parameters: {
        query: {
          compressed: boolean;
          useStorageAccount: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string;
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/problem+json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/exports": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": string[];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/problem+json": components["schemas"]["ProblemDetails"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query: {
          filename: string;
          sqlQuery?: string;
          useStorageAccount: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Dependency: {
      dependsOn?: string | null;
      taskId?: string | null;
    };
    EntitySearchRequest: {
      type?: string | null;
      searchParameters?: components["schemas"]["SearchParameter"][] | null;
      /** Format: int32 */
      pageSize?: number | null;
      continuationToken?: string | null;
      sort?: components["schemas"]["SortField"][] | null;
      fields?: string[] | null;
      count?: boolean | null;
      facets?: string[] | null;
      version?: string | null;
    };
    JsonElementPaginatedResponse: {
      items?: unknown[] | null;
      continuationToken?: string | null;
      /** Format: int32 */
      count?: number;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
    } & {
      [key: string]: unknown;
    };
    Project: {
      dependencies?: components["schemas"]["Dependency"][] | null;
      description?: string | null;
      id?: string | null;
      name?: string | null;
      /** @enum {string} */
      status?: "Active" | "Cancelled" | "Completed" | "OnHold" | "Planned";
      tasks?: components["schemas"]["Task"][] | null;
      team?: components["schemas"]["Team"][] | null;
      timeline?: components["schemas"]["Timeline"] | null;
    };
    ProjectPaginatedResponse: {
      items?: components["schemas"]["Project"][] | null;
      continuationToken?: string | null;
      /** Format: int32 */
      count?: number;
    };
    ProjectSearchRequest: {
      continuationToken?: string | null;
      /** Format: int32 */
      pageSize?: number | null;
      name?: string | null;
      status?: string | null;
      /** Format: date-time */
      createdAfter?: string | null;
      /** Format: date-time */
      createdBefore?: string | null;
      tags?: string[] | null;
      owner?: string | null;
    };
    /**
     * Format: int32
     * @enum {string}
     */
    ProjectStatus: "Active" | "Cancelled" | "Completed" | "OnHold" | "Planned";
    /**
     * Format: int32
     * @enum {string}
     */
    Role: "Designer" | "Developer" | "Manager" | "Qa";
    SearchParameter: {
      field?: string | null;
    };
    SortField: {
      field?: string | null;
      order?: components["schemas"]["SortOrder"] | null;
    };
    /**
     * Format: int32
     * @enum {string}
     */
    SortOrder: "Asc" | "Desc";
    Task: {
      assignee?: string | null;
      description?: string | null;
      /** Format: date-time */
      dueDate?: string | null;
      id?: string | null;
      /** @enum {string} */
      status?: "Done" | "InProgress" | "Review" | "Todo";
      title?: string | null;
    };
    /**
     * Format: int32
     * @enum {string}
     */
    TaskStatus: "Done" | "InProgress" | "Review" | "Todo";
    Team: {
      /** @enum {string} */
      role?: "Designer" | "Developer" | "Manager" | "Qa";
      userId?: string | null;
    };
    Timeline: {
      /** Format: date-time */
      deadline?: string | null;
      /** Format: date-time */
      endDate?: string | null;
      /** Format: date-time */
      startDate?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  PostGenerateSample: {
    parameters: {
      query?: {
        size?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": number;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/problem+json": components["schemas"]["ProblemDetails"];
        };
      };
    };
  };
}
